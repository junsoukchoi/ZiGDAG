% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/linear.zigdag.R
\name{linear.zigdag}
\alias{linear.zigdag}
\title{Learning the causal structure of a linear ZiG-DAG}
\usage{
linear.zigdag(
  dat,
  start = NULL,
  ghpd = "hyper.poisson",
  method = "hc",
  tabu = 10,
  max.tabu = tabu,
  maxiter = 500,
  tol = .Machine$double.eps^0.25,
  optim.control = list(),
  verbose = FALSE
)
}
\arguments{
\item{dat}{a data matrix.}

\item{start}{a square adjacency matrix, the directed acyclic graph to be used to initialize the algorithm. If none is specified, the empty graph is used.}

\item{ghpd}{a character string, the generalized hypergeometric probability distribution to be used for the linear ZiG-DAG. Possible values are "\code{hyper.poisson}" for the hyper-Poisson distribution and "\code{negative.binomial}" for the negative binomial distribution. If none is specified, the default is "\code{hyper.poisson}".}

\item{method}{a character string, the greedy search method to be used. Possible values are "\code{hc}" for the hill-climbing and "\code{tabu}" for the tabu search. If none is specified, the default is "\code{hc}". Now, the method "\code{tabu}" is not available for the ghpd "\code{negative.binomial}".}

\item{tabu}{a positive integer number, the length of the tabu list for the "\code{tabu}" search.}

\item{max.tabu}{a positive integer number, the iterations that the "\code{tabu}" search can perform without improving the best network score (BIC).}

\item{maxiter}{an integer, the maximum number of iterations.}

\item{tol}{a numeric value, the tolerance for the convergence of the network score (BIC).}

\item{optim.control}{a list of control parameters passed to \code{optim}.}

\item{verbose}{a boolean value. If \code{TRUE}, progress of the algorithm is printed; otherwise the function is completely silent.}
}
\value{
An object of class \code{linear.zidag}, a list containing the following components:\itemize{
\item\code{est}: a list of model parameter estimates for the linear ZiG-DAG, of which the component "\code{E}" gives the adjacency matrix of the estimated DAG for the linear ZiG-DAG.\cr
\item\code{bic}: the Bayesian Information Criterion for the estimated linear ZiG-DAG model.
\item\code{iter}: the number of iterations of the score-based greedy search algorithm used. 
}
}
\description{
\code{linear.zidag} learns the causal structure of a linear ZiG-DAG using a score-based greedy search algorithm.
}
\examples{
library(ZiGDAG)
library(igraph)
library(DGLMExtPois)
# set a random seed
set.seed(1)

# generate synthetic data from a linear ZiG-DAG, where zero-inflated hyper-Poisson distributions are assumed for each node
# generate the DAG with 5 nodes: 1 -> 2 -> 3 -> 4 -> 5
p = 5   # number of variables
E_true = matrix(0, p, p)
for (j in 2 : p) E_true[j, j - 1] = 1

# generate model parameters for the linear ZiG-DAG
alpha_true  = matrix(0, p, p)
alpha_true[E_true == 1] = runif(sum(E_true), 0.5, 2)
beta_true   = matrix(0, p, p)
beta_true[E_true == 1]  = runif(sum(E_true), -2, -0.5)
delta_true  = runif(p, -1.5, -1)
gamma_true  = runif(p, 1, 1.5)
lambda_true = exp(runif(p, -2, 2))

# generate synthetic data from the specified linear ZiG-DAG with sample size n = 500 
n   = 500  # sample size
dat = matrix(0, n, p)
order_nodes = as_ids(topo_sort(graph_from_adjacency_matrix(t(E_true))))
for (j in order_nodes)
{
   pi_true = as.vector(exp(dat \%*\% alpha_true[j, ] + delta_true[j]))
   pi_true = pi_true / (1 + pi_true)
   pi_true[is.nan(pi_true)] = 1
   mu_true = as.vector(exp(dat \%*\% beta_true[j, ] + gamma_true[j]))
   dat[ , j] = (1 - rbinom(n, 1, pi_true)) * rhP(n, lambda_true[j], mu_true)
}

# learn the causal structure of linear ZiG-DAG from synthetic data 
# apply the hill-climbing algorithm for linear ZiG-DAG to synthetic data
fit = linear.zigdag(dat, ghpd = "hyper.poisson", method = "hc")
# adjacency matrix of the estimated causal DAG
E_est = fit$est$E
}
